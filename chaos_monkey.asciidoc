== Testing Resilience with a Chaos Monkey

One of the primary reasons to use Erlang for building an application
is that Erlang has legendary reliability. However in order to make
that happen we need to follow a number of design patterns.

In Particular we need to make sure that when one service fails that
other services can carry on without interruption, or at least with a
minimal degradation of service. We can ensure that services are
restarted by using the standard OTP supervisor framework. However it
would be good to be able to test that our application can withstand
these failures and keep on doing its job.

One way to do this is ensure that things will randomly fail to ensure
that other parts are weekly coupled and can keep working. A standard
tool for doing this is a _Chaos Monkey_. Which is a program that will
randomly kill processes from time to time. Thus forcing developers to
deal with the possibility of degraded service.

=== How a  Chaos Monkey works

=== How to implement one

=== Testing that the system is still running.